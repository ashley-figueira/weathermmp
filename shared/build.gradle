apply plugin: 'kotlin-multiplatform'
apply plugin: "kotlinx-serialization"

kotlin {
    targets {
        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") \
                              ? presets.iosArm64 : presets.iosX64

        fromPreset(iOSTarget, 'iOS') {
            compilations.main.outputKinds('FRAMEWORK')
        }

        fromPreset(presets.jvm, 'android')
    }

    sourceSets {
        commonMain.dependencies {
            api 'org.jetbrains.kotlin:kotlin-stdlib-common'
            implementation "io.ktor:ktor-client-core:${versions.ktor}"
            implementation "io.ktor:ktor-client-json:${versions.ktor}"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:${versions.kotlinCoroutines}"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:${versions.serialization}"
        }

        androidMain.dependencies {
            api 'org.jetbrains.kotlin:kotlin-stdlib'
            implementation "io.ktor:ktor-client-core-jvm:${versions.ktor}"
            implementation "io.ktor:ktor-client-json-jvm:${versions.ktor}"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.kotlinCoroutines}"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:${versions.serialization}"
        }

        iOSMain.dependencies {
            implementation "io.ktor:ktor-client-core-ios:${versions.ktor}"
            implementation "io.ktor:ktor-client-ios:${versions.ktor}"
            implementation "io.ktor:ktor-client-json-ios:${versions.ktor}"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:${versions.kotlinCoroutines}"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:${versions.serialization}"
        }
    }
}

configurations {
    compileClasspath
}

task packForXCode(type: Sync) {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'

    inputs.property "mode", mode
    dependsOn kotlin.targets.iOS.compilations.main.linkTaskName("FRAMEWORK", mode)

    from { kotlin.targets.iOS.compilations.main.getBinary("FRAMEWORK", mode).parentFile }
    into frameworkDir

    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}

tasks.build.dependsOn packForXCode
